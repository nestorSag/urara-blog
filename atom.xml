<?xml version='1.0' encoding='utf-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://urara-demo.netlify.app/</id>
  <title><![CDATA[Home]]></title>
  <subtitle><![CDATA[Sweet & Powerful SvelteKit Blog Template]]></subtitle>
  <icon>/favicon.png</icon>
  <link href="https://urara-demo.netlify.app" />
  <link href="https://urara-demo.netlify.app/atom.xml" rel="self" type="application/atom+xml" />
  <updated>2024-01-21T19:56:53.171Z</updated>
  <author>
    <name><![CDATA[Nestor Sanchez]]></name>
  </author>
  <category term="NLP" scheme="https://urara-demo.netlify.app/?tags=NLP" />
  <category term="generative models" scheme="https://urara-demo.netlify.app/?tags=generative%20models" />
  <category term="computer vision" scheme="https://urara-demo.netlify.app/?tags=computer%20vision" />
  <category term="dimensionality reduction" scheme="https://urara-demo.netlify.app/?tags=dimensionality%20reduction" />
  <category term="auto encoder" scheme="https://urara-demo.netlify.app/?tags=auto%20encoder" />
  <entry>
    <title type="html"><![CDATA[A Generative Model For English Town Names]]></title>
    <link href="https://urara-demo.netlify.app/town-name-generator" />
    <id>https://urara-demo.netlify.app/town-name-generator</id>
    <published>2024-01-18T00:00:00.000Z</published>
    <updated>2024-01-21T19:56:11.583Z</updated>
    <content type="html">
      <![CDATA[<h2 id="motivation" data-svelte-h="svelte-1qh4qj0"><a href="#motivation">Motivation</a></h2> <p data-svelte-h="svelte-rjmjst">It seems <a href="https://www.instagram.com/reel/Cv5SkdLrVoq/?igsh=MXIzaDgzODBxZDlsZg==" rel="nofollow noopener noreferrer external" target="_blank">I am not the only one</a> that find some English town names slightly quirky or outright funny. Maybe it is because their spelling is quite different to the rest of English vocabulary we use one our daily lives, or maybe some of these places were named a long time ago when English looked and sounded very different from today.</p> <p data-svelte-h="svelte-1135iis">Whatever the reason, I thought it would be fun to train a small transformer to come up with similar-sounding names, if only to see if we would fall for a deepfake sign on a road.</p> <h2 id="data" data-svelte-h="svelte-14ht7vg"><a href="#data">Data</a></h2> <p data-svelte-h="svelte-og9z6v">Relevant data for most countries can be easily accessed from <code>http://download.geonames.org</code>, and the data contain administrative information too, so it is possible to use data for a single state or even county. In the case of England, available data contains a bit over 16,000 names.</p> <h2 id="architecture" data-svelte-h="svelte-m3c4bv"><a href="#architecture">Architecture</a></h2> <p data-svelte-h="svelte-1gwcci8">This project was done with Keras NLP. The model is a transformer decoder, identical to the one in <a href="https://arxiv.org/abs/1706.03762" rel="nofollow noopener noreferrer external" target="_blank">Attention Is All You Need</a>, with the following parameters</p> <ul data-svelte-h="svelte-zoyk4i"><li>Attention heads: 3</li> <li>Transformer layers: 3</li> <li>Fully connected layer size: 512</li> <li>Embedding size: 32</li></ul> <p data-svelte-h="svelte-1daohs7">Training parameters were:</p> <ul data-svelte-h="svelte-9yb2jp"><li>Batch size: 32</li> <li>Epochs: 200</li> <li>Optimizer: ADAM with <code>learning_rate = 0.001</code></li></ul> <p data-svelte-h="svelte-18xe92u">All of this took around 10 minutes on a CPU.</p> <p data-svelte-h="svelte-18cgx3r">The tokenizer worked at character level, which for English produced 30 characters, including beginning and end of text tokens</p> <h2 id="results" data-svelte-h="svelte-xvlaxe"><a href="#results">Results</a></h2> <p data-svelte-h="svelte-1h17g8j">Here are some of the generated names I liked the most for England</p> <ul data-svelte-h="svelte-o1jbnn"><li>Upminster</li> <li>Whippleigh</li> <li>Kelingbrough</li> <li>Millers mill</li> <li>Croomfleet</li> <li>Chillarton</li> <li>Egerton on the hill</li> <li>Kilkinster</li> <li>Ashton Dingley</li> <li>Hegleton</li></ul> <p data-svelte-h="svelte-c5q24y">As a non-native speaker I have to admit I wouldn’t bat an eye if I saw any of those on a road sign (Perhap’s Miller’s Mill would raise some suspicion), which somehow makes it more amusing.</p> <p data-svelte-h="svelte-1qpls0m">This little experiment can be re-run for any other country or subregion with barely any change in command line parameters, so I also had a chuckle doing this for Mexican towns. Some of the best ones:</p> <ul data-svelte-h="svelte-5cyzm3"><li>San Juan Guilalapam</li> <li>El Malo</li> <li>Llano Grande</li> <li>Yuchiqui de la Luma</li> <li>Quinicuelo</li></ul> <h1 id="code" data-svelte-h="svelte-azjqur"><a href="#code">Code</a></h1> <p data-svelte-h="svelte-1ask3tc">The project’s repo is <a href="https://github.com/nestorSag/towngen" rel="nofollow noopener noreferrer external" target="_blank">here</a>.</p>]]>
    </content>
    <category term="NLP" scheme="https://urara-demo.netlify.app/?tags=NLP" />
    <category term="generative models" scheme="https://urara-demo.netlify.app/?tags=generative%20models" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Training Generative Models for Typefaces]]></title>
    <link href="https://urara-demo.netlify.app/textfonts-ai" />
    <id>https://urara-demo.netlify.app/textfonts-ai</id>
    <published>2021-07-31T00:00:00.000Z</published>
    <updated>2024-01-21T19:56:11.547Z</updated>
    <content type="html">
      <![CDATA[<p data-svelte-h="svelte-nendkn"><em>You can find <a href="https://github.com/nestorSag/textfont-ai" rel="nofollow noopener noreferrer external" target="_blank">this project’s repository on Github</a>, along with pretrained models and an interactive Dash web app.</em></p> <h2 id="motivation" data-svelte-h="svelte-1qh4qj0"><a href="#motivation">Motivation</a></h2> <p data-svelte-h="svelte-1vjrv74">At some point last year I was watching one of the episodes of <a href="https://en.wikipedia.org/wiki/Abstract%3A_The_Art_of_Design" rel="nofollow noopener noreferrer external" target="_blank">Abstract: the art of design</a> on Netflix, when I realised typeface generation was possibly a low hanging fruit from a machine learning perspective. Deep generative models have been shown to achieve impressive results in a variety of tasks, particularly image generation, and this includes datasets such as faces, landscapes and even painting styles, so it is reasonable to expect they wouldn’t also excel at typeface generation.</p> <p data-svelte-h="svelte-1yz8p5w">This is not a new idea, for example in <a href="https://distill.pub/2017/aia/" rel="nofollow noopener noreferrer external" target="_blank">this article</a> they do exactly that, and approach the problem from the broader context of AI-assisted design. There are also a few Github repositories on the subject. I thought it would be fun to give it a shot myself. However, I did not try to produce typeface files per se but only typeface images, i.e. images of typeface characters, as the former would involve an awful lot of work dealing with the internal complexities of <code>otf</code> and related file formats.</p> <h2 id="data" data-svelte-h="svelte-14ht7vg"><a href="#data">Data</a></h2> <p data-svelte-h="svelte-wp8n64">The main problem here was to get data. Google makes their fonts publicly available, so thats around 4k examples. There are plenty of websites that offer free fonts online, but they don’t have an API of course, so there was no other way than scraping a few of them. In the end I got a bit under 130k fonts, or around 20 GB of images.</p> <p data-svelte-h="svelte-1yxkc6i">Mapping fonts to labeled images ready for model consumption was relatively easy, with an Apache Beam job on Google Cloud extracting 64-by-64 character images, and Tensorflow’s <code>Dataset</code> abstraction to consume remote files. Being free fonts, there were lots of corrupted files, corrupted characters within otherwise ok files, mislabeled characters, and fonts that looked nothing like characters.</p> <p data-svelte-h="svelte-1i8z3r2">I did train a classifier on the dataset and discarded all misclassified characters (around 10%); discarded images were mostly fonts or characters that were just too extravagant or simply defective, and I found that this improved the quality of generative models downstream. I also restricted the character set to uppercase to save a bit of time.</p> <h2 id="architecture" data-svelte-h="svelte-m3c4bv"><a href="#architecture">Architecture</a></h2> <p data-svelte-h="svelte-82gawe">Once plenty of clean data was available the next problem was deciding on a model architecture. I am not an expert in generative models, but thought the architecture outlined in <a href="https://arxiv.org/abs/1511.05644" rel="nofollow noopener noreferrer external" target="_blank">Adversarial Autoencoders by Goodfellow et all</a> looked good for this problem, as it enabled the model to also receive label information. I ended up doing one slight modification to this starting architecture, and the workflow looked like the following diagram (<strong>this might be hard to see with a dark background</strong>):</p> <p><picture><source srcset="/_app/immutable/assets/architecture.4a83bda6.avif 736w" type="image/avif"> <img src="/textfonts-ai/images/architecture.png" alt="architecture" class="rounded-lg my-2" loading="lazy" decoding="async"></picture></p> <p data-svelte-h="svelte-1j8344u">The only difference with the paper I mentioned is that I split the encoding phase in 2: first the image is encoded by an <em>image encoder</em>, then a <em>full encoder</em> takes the encoded image features <em>and</em> the labels (this is, the one-hot-encoded charater labels) to finally produce the embedded style representation. I did this hoping that the labels help not only on the decoding phase but also on the encoding one, say, by underlining the right features given the character label, e.g. if it’s an H, curviness is probably more important to the font’s style than if its a C, which I hoped would speed up training.</p> <h3 id="character-style-models" data-svelte-h="svelte-1mmysz2"><a href="#character-style-models">Character style models</a></h3> <p data-svelte-h="svelte-1sw7vkl">The following image shows one of the model’s style components for a randomly sampled font, once the model plateaud to a MSE of around 0.020 (this is the pixelwise MSE using normalised pixels in [0,1]) by training it with minibatches of randomly sampled character images across the dataset:</p> <p><img src="/textfonts-ai/images/chars.gif" alt="chars" class="rounded-lg my-2" loading="lazy" decoding="async"> <em data-svelte-h="svelte-qis0vt">Transition through a straight line in feature space between two randomly generated fonts.</em></p> <p data-svelte-h="svelte-178cxlz">There was a caveat though: generating all characters for a given style vector does not necessarily produce consistent image styles across the character set. I think this is because the model is only encoding the style of individual characters, as during training there is nothing that indicates any association between characters from the same font, and so, the latent style space ends up encoding styles slightly differently for different characters. To be fair, this was a relatively uncommon occurrence, but it did mean that this model wasn’t ideal for font generation.</p> <h3 id="font-style-models-a-self-supervised-approach" data-svelte-h="svelte-1b7m0xe"><a href="#font-style-models-a-self-supervised-approach">Font style models: a self-supervised approach</a></h3> <p data-svelte-h="svelte-18m7k43">In order to address the caveat mentioned above, I started taking font minibatches rather than image minibatches; this restricted the training to around 70k examples of fonts that were complete (i.e., no character was lost due to corrupted data or misclassification). The trick here was to use a bit of self supervised learning to try and make the model learn the fonts’ style rather than the character style.</p> <p data-svelte-h="svelte-v0ns15">To do this, I shuffled the images and labels randomly when passing them to the decoder. So for example, the decoder might get the style vector from an ‘A’, but be required to reconstruct a ‘B’ instead, which should be possible to do from just the style vector and the one-hot-encoded label for ‘B’. This worked, and the styles were now consistent across characters for all style vectors, but the images were more blurry than I expected, even after the model plateaued, with a mean squared error of 0.075:</p> <p><img src="/textfonts-ai/images/fonts.gif" alt="fonts" class="rounded-lg my-2" loading="lazy" decoding="async"> <em data-svelte-h="svelte-qis0vt">Transition through a straight line in feature space between two randomly generated fonts.</em></p> <p data-svelte-h="svelte-1nbpcj9">An interesting phenomenon was that this model consistently used just 5 dimensions in the style space even when there were more than that, making the rest useless; I suspect this means that there are (broadly speaking) only as many high-level characteristics that can be generalised from a single character to entire font styles, e.g. tickness, height/width ratio and so on.</p> <h3 id="font-style-models-fonts-as-26-channel-images" data-svelte-h="svelte-mhfqlc"><a href="#font-style-models-fonts-as-26-channel-images">Font style models: fonts as 26-channel images</a></h3> <p data-svelte-h="svelte-28uau8">My second attempt was to take fonts as images with 26 channels where each channel was associated to a character. With this architecture, there was no need for labels anymore, as now channels acted implicitly as labels; since labels were gone, there wasn’t any need for splitting the encoding stage in 2 parts, so the whole setup reduced to the usual autoencoder architecture, plus the discriminator network on the side, simplifying things quite a bit.</p> <p data-svelte-h="svelte-tsszeu">This model worked better in general, achieving a lower reconstruction error and having faster training times. Since fonts are passed as multi-channel images, this is less intensive on the GPU’s memory as well, because intermediate representations are per-font and not per-image.</p> <p><img src="/textfonts-ai/images/tensor-fonts.gif" alt="fonts" class="rounded-lg my-2" loading="lazy" decoding="async"> <em data-svelte-h="svelte-qis0vt">Transition through a straight line in feature space between two randomly generated fonts.</em></p> <p data-svelte-h="svelte-1mte2cv">I have to admit all results looked worse than expected at first. Then again, training high-quality generative models is not easy. Anyway, I think with a bit more data to generalise better, and with a sequence model to map images to points on the plane, (and with an expert that helps me navigate the technical aspects of font files!) it would even be possible to generate usable font files and not just images. Maybe this would be a nice bit of help for designers, to have a starting point when they set out to create a new font.</p> <p data-svelte-h="svelte-1m84kyc">This project is available on <a href="https://github.com/nestorSag/textfont-ai" rel="nofollow noopener noreferrer external" target="_blank">Github</a>, along with some pretrained decoders, and a Dash app in which to visualise style spaces.</p> <h2 id="lessons-in-mlops" data-svelte-h="svelte-r9vgwr"><a href="#lessons-in-mlops">Lessons in MLOps</a></h2> <p data-svelte-h="svelte-rhpt24">This project was more than anything an excuse to get my hands dirty with MLOps practices, and I placed a lot of emphasis on this along the project. A few lessons I learned:</p> <ul data-svelte-h="svelte-1s7x2od"><li><p>Experiment tracking does make a difference in project organisation, and MLFlow is a great tool for this</p></li> <li><p>Configuration became the project’s center of gravity. Comprehensive YAML configuration schemas is what enabled adding complexity without chaos as a byproduct.</p></li></ul>]]>
    </content>
    <category term="computer vision" scheme="https://urara-demo.netlify.app/?tags=computer%20vision" />
    <category term="generative models" scheme="https://urara-demo.netlify.app/?tags=generative%20models" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Angular Autoencoders for Dimensionality Reduction]]></title>
    <link href="https://urara-demo.netlify.app/angular-autoencoder" />
    <id>https://urara-demo.netlify.app/angular-autoencoder</id>
    <published>2019-02-25T00:00:00.000Z</published>
    <updated>2024-01-21T19:56:11.535Z</updated>
    <content type="html">
      <![CDATA[<h2 id="motivation" data-svelte-h="svelte-1qh4qj0"><a href="#motivation">Motivation</a></h2> <p>Autoencoders are used to create low-dimensional representations that compress as much information as possible from the original data; hopefully, the learned representation will be comprised of high-level features useful for any other statistical model that needs to handle the same data. What is fed to the autoencoder is the usual Cartesian representation, but if the data has some underlying structure, from disjoint clusters to some exotic lower-dimensional manifold, it might be easier to capture such structure if we work with angular features instead. In particular, encoding the angular features directly makes it straightforward to visualize the data in <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span>.</p> <h2 id="formulation" data-svelte-h="svelte-1gfjz7w"><a href="#formulation">Formulation</a></h2> <p>Assume we have data <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mi>d</mi></msup></mrow><annotation encoding="application/x-tex">x_1,...,x_n \in \mathbb{R}^d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mspace"></span><span class="mrel">∈</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span>; we want to project this data to <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span> while preserving as much information as possible; if we look at their <a href="https://en.wikipedia.org/wiki/N-sphere#Spherical_coordinates" rel="nofollow noopener noreferrer external" target="_blank" data-svelte-h="svelte-1yr8pr4">polar representation</a></p> <div class="math math-display"><!-- HTML_TAG_START --><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>r</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mspace width="1em"/><msub><mi>r</mi><mi>i</mi></msub><mo>=</mo><mi mathvariant="normal">∥</mi><msub><mi>x</mi><mi>i</mi></msub><msub><mi mathvariant="normal">∥</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>ϕ</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>d</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x_i = (r_i, \phi_i), \quad  r_i = \Vert x_i \Vert_2, \phi_i = (\phi_i, ..., \phi_{i,d-1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace"></span><span class="mspace"></span><span class="mord"><span class="mord mathnormal">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord">∥</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">d</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mclose">)</span></span></span></span></span><!-- HTML_TAG_END --></div> <p data-svelte-h="svelte-165bzys">where the angular coordinates are constrained to</p> <div class="math math-display"><!-- HTML_TAG_START --><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>ϕ</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>k</mi></mrow></msub><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>π</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mspace width="1em"/><mi>k</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>d</mi><mo>−</mo><mn>2</mn><mspace linebreak="newline"></mspace><msub><mi>ϕ</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>d</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>2</mn><mi>π</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\phi_{i,k} \in [0,\pi], \quad k=1,...,d-2\\\phi_{i,d-1} \in [0,2\pi]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mspace"></span><span class="mrel">∈</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord mathnormal">π</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace"></span><span class="mspace"></span><span class="mord mathnormal">k</span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord mathnormal">d</span><span class="mspace"></span><span class="mbin">−</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord">2</span></span><span class="mspace newline"></span><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">d</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mspace"></span><span class="mrel">∈</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">2</span><span class="mord mathnormal">π</span><span class="mclose">]</span></span></span></span></span><!-- HTML_TAG_END --></div> <p>we could use the original norms <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∥</mi><msub><mi>x</mi><mi>i</mi></msub><msub><mi mathvariant="normal">∥</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\Vert x_i\Vert_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord">∥</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span> as the radial component in the projections, and what is left is mapping the original angular features to the interval <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>2</mn><mi>π</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,2\pi]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">2</span><span class="mord mathnormal">π</span><span class="mclose">]</span></span></span></span><!-- HTML_TAG_END --></span>; so, if we had a function <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">Ψ</mi><msub><mi>θ</mi><mn>1</mn></msub></msub><mo stretchy="false">(</mo><mo>⋅</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Psi_{\theta_{1}}(\cdot)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord">Ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord">⋅</span><span class="mclose">)</span></span></span></span><!-- HTML_TAG_END --></span> that maps the angular representation to this interval, it would be straightforward to map <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span> to the plane as <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">(</mo><mi mathvariant="normal">∥</mi><msub><mi>x</mi><mi>i</mi></msub><msub><mi mathvariant="normal">∥</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="normal">Ψ</mi><msub><mi>θ</mi><mn>1</mn></msub></msub><mo stretchy="false">(</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\left( \Vert x_i \Vert_2,\Psi_{\theta_{1}}(\phi_i) \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="minner"><span class="mopen delimcenter">(</span><span class="mord">∥</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"></span><span class="mord"><span class="mord">Ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mclose">)</span><span class="mclose delimcenter">)</span></span></span></span></span><!-- HTML_TAG_END --></span> in polar coordinates, or equivalently</p> <div class="math math-display"><!-- HTML_TAG_START --><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∥</mi><msub><mi>x</mi><mi>i</mi></msub><msub><mi mathvariant="normal">∥</mi><mn>2</mn></msub><mo>⋅</mo><mo stretchy="false">(</mo><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi mathvariant="normal">Ψ</mi><msub><mi>θ</mi><mn>1</mn></msub></msub><mo stretchy="false">(</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><msub><mi mathvariant="normal">Ψ</mi><msub><mi>θ</mi><mn>1</mn></msub></msub><mo stretchy="false">(</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Vert x_i \Vert_2 \cdot (\cos (\Psi_{\theta_{1}}(\phi_i)), \sin (\Psi_{\theta_{1}}(\phi_i)))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord">∥</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mspace"></span><span class="mbin">⋅</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mopen">(</span><span class="mop">cos</span><span class="mopen">(</span><span class="mord"><span class="mord">Ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mclose">))</span><span class="mpunct">,</span><span class="mspace"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord"><span class="mord">Ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mclose">)))</span></span></span></span></span><!-- HTML_TAG_END --></div> <p>in Cartesian coordinates; since angle spaces are periodic, <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">Ψ</mi><msub><mi>θ</mi><mn>1</mn></msub></msub></mrow><annotation encoding="application/x-tex">\Psi_{\theta_{1}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord">Ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span> would need to be periodic in the sense that <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">Ψ</mi><msub><mi>θ</mi><mn>1</mn></msub></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>≈</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\Psi_{\theta_{1}}(y) \approx 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord">Ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">y</span><span class="mclose">)</span><span class="mspace"></span><span class="mrel">≈</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord">0</span></span></span></span><!-- HTML_TAG_END --></span> and <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">Ψ</mi><msub><mi>θ</mi><mn>1</mn></msub></msub><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>≈</mo><mn>2</mn><mi>π</mi></mrow><annotation encoding="application/x-tex">\Psi_{\theta_{1}}(z) \approx 2\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord">Ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">z</span><span class="mclose">)</span><span class="mspace"></span><span class="mrel">≈</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord">2</span><span class="mord mathnormal">π</span></span></span></span><!-- HTML_TAG_END --></span> only if <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>≈</mo><mi>z</mi></mrow><annotation encoding="application/x-tex">y \approx z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord mathnormal">y</span><span class="mspace"></span><span class="mrel">≈</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord mathnormal">z</span></span></span></span><!-- HTML_TAG_END --></span>.</p> <p data-svelte-h="svelte-1gymzg8">The reason why a high-quality projection with these characteristics must exist, even though it could seem too rigid at first, is because this is equivalent to finding a closed path on the hypersphere</p> <div class="math math-display"><!-- HTML_TAG_START --><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi mathvariant="double-struck">S</mi><mrow><mi>d</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mo stretchy="false">{</mo><mi>x</mi><mo>∈</mo><msup><mi mathvariant="double-struck">R</mi><mi>d</mi></msup><mo>:</mo><mi mathvariant="normal">∥</mi><mi>x</mi><msub><mi mathvariant="normal">∥</mi><mn>2</mn></msub><mo>=</mo><mn>1</mn><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\mathbb{S}^{d-1} = \{x \in \mathbb{R}^{d}:\Vert x\Vert _2 = 1\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mopen">{</span><span class="mord mathnormal">x</span><span class="mspace"></span><span class="mrel">∈</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span><span class="mspace"></span><span class="mrel">:</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord">∥</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord">1</span><span class="mclose">}</span></span></span></span></span><!-- HTML_TAG_END --></div> <p data-svelte-h="svelte-1k6qi25">such that it follows closely the shape that our rescaled unit-norm data,</p> <div class="math math-display"><!-- HTML_TAG_START --><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="script">D</mi><mo>=</mo><mo stretchy="false">{</mo><msub><mi>z</mi><mi>i</mi></msub><mo>=</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><mi mathvariant="normal">∥</mi><msub><mi>x</mi><mi>i</mi></msub><msub><mi mathvariant="normal">∥</mi><mn>2</mn></msub><mo separator="true">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>n</mi><mo stretchy="false">}</mo><mo>⊂</mo><msup><mi mathvariant="double-struck">S</mi><mrow><mi>d</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">\mathcal{D} = \{z_i = x_i/\Vert x_i \Vert_2, i=1,...n\} \subset \mathbb{S}^{d-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord mathcal">D</span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mord">/∥</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"></span><span class="mord mathnormal">i</span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">...</span><span class="mord mathnormal">n</span><span class="mclose">}</span><span class="mspace"></span><span class="mrel">⊂</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></div> <p>induces on <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">S</mi><mrow><mi>d</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">\mathbb{S}^{d-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span>. To see this, let <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord">Ω</span></span></span></span><!-- HTML_TAG_END --></span> be the seth of continuous, closed paths on <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">S</mi><mrow><mi>d</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">\mathbb{S}^{d-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span>; since they are one-dimensional, they can be characterized as</p> <div class="math math-display"><!-- HTML_TAG_START --><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">Ω</mi><mo>=</mo><mo stretchy="false">{</mo><mi>f</mi><mo>:</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>2</mn><mi>π</mi><mo stretchy="false">]</mo><mo>↦</mo><msup><mi mathvariant="double-struck">S</mi><mrow><mi>d</mi><mo>−</mo><mn>1</mn></mrow></msup><mi mathvariant="normal">∣</mi><mi>f</mi><mo>∈</mo><msup><mi>C</mi><mn>1</mn></msup><mo separator="true">,</mo><mi>f</mi><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">\Omega = \{f:[0,2\pi] \mapsto \mathbb{S}^{d-1}| f \in C^1, f(0) = f(2\pi)\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord">Ω</span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mopen">{</span><span class="mord mathnormal">f</span><span class="mspace"></span><span class="mrel">:</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">2</span><span class="mord mathnormal">π</span><span class="mclose">]</span><span class="mspace"></span><span class="mrel">↦</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal">f</span><span class="mspace"></span><span class="mrel">∈</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathnormal">C</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"></span><span class="mord mathnormal">f</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord mathnormal">f</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal">π</span><span class="mclose">)}</span></span></span></span></span><!-- HTML_TAG_END --></div> <p>which is the set of all continuous, periodic functions from <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>2</mn><mi>π</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0,2\pi]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">2</span><span class="mord mathnormal">π</span><span class="mclose">]</span></span></span></span><!-- HTML_TAG_END --></span> to <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">S</mi><mrow><mi>d</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">\mathbb{S}^{d-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span>. It’s not hard to see that there must be an element in <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord">Ω</span></span></span></span><!-- HTML_TAG_END --></span> that goes through each point in <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">D</mi></mrow><annotation encoding="application/x-tex">\mathcal{D}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord mathcal">D</span></span></span></span><!-- HTML_TAG_END --></span>, that is, there is <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo>∈</mo><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">g \in \Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord mathnormal">g</span><span class="mspace"></span><span class="mrel">∈</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord">Ω</span></span></span></span><!-- HTML_TAG_END --></span> such that <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><mi mathvariant="normal">∥</mi><msub><mi>x</mi><mi>i</mi></msub><msub><mi mathvariant="normal">∥</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">g(t_i) = x_i/ \Vert x_i \Vert_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord mathnormal">g</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mclose">)</span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mord">/∥</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span> for some <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>t</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>t</mi><mi>n</mi></msub><mo>∈</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>2</mn><mi>π</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t_1,...t_n \in (0,2\pi)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">...</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mspace"></span><span class="mrel">∈</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">2</span><span class="mord mathnormal">π</span><span class="mclose">)</span></span></span></span><!-- HTML_TAG_END --></span>, and conversely there should exist <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>g</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">g^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathnormal">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span> such that <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mrow><mo>−</mo><mn>1</mn></mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mi mathvariant="normal">/</mi><mi mathvariant="normal">∥</mi><msub><mi>x</mi><mi>i</mi></msub><msub><mi mathvariant="normal">∥</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>t</mi><mi>i</mi></msub><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>2</mn><mi>π</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">g{-1}(x_i/\Vert x_i\Vert _2) = t_i \in [0,2\pi], i=1,...,n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord mathnormal">g</span><span class="mord"><span class="mord">−</span><span class="mord">1</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mord">/∥</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mord"><span class="mord">∥</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mclose">)</span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mspace"></span><span class="mrel">∈</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">2</span><span class="mord mathnormal">π</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord mathnormal">i</span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord mathnormal">n</span></span></span></span><!-- HTML_TAG_END --></span>. This tells us that the kind of projection we are looking at is not too restrictive and in fact has arbitrary flexibility; however, we aim to find a closed path that captures only the general shape of <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">D</mi></mrow><annotation encoding="application/x-tex">\mathcal{D}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord mathcal">D</span></span></span></span><!-- HTML_TAG_END --></span>, in this way giving us valuable information when projected onto <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span>.</p> <p>An autoencoder architecture can help us find such path. <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">Ψ</mi><msub><mi>θ</mi><mn>1</mn></msub></msub></mrow><annotation encoding="application/x-tex">\Psi_{\theta_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord">Ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span> would be the encoder section of the network, and we would also have a decoder  <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">Φ</mi><msub><mi>θ</mi><mn>2</mn></msub></msub></mrow><annotation encoding="application/x-tex">\Phi_{\theta_2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span> such that <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">Φ</mi><msub><mi>θ</mi><mn>2</mn></msub></msub><mo stretchy="false">(</mo><msub><mi mathvariant="normal">Ψ</mi><msub><mi>θ</mi><mn>1</mn></msub></msub><mo stretchy="false">(</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>≈</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo separator="true">,</mo><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">\Phi_{\theta_{2}}(\Psi_{\theta_{1}}(\phi_i)) \approx \phi_i, i=1,...,m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord">Ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mclose">))</span><span class="mspace"></span><span class="mrel">≈</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"></span><span class="mord mathnormal">i</span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord mathnormal">m</span></span></span></span><!-- HTML_TAG_END --></span>, with the additional restriction that <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">Φ</mi><msub><mi>θ</mi><mn>2</mn></msub></msub><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo><mo>=</mo><msub><mi mathvariant="normal">Φ</mi><msub><mi>θ</mi><mn>2</mn></msub></msub><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Phi_{\theta_{2}}(0) = \Phi_{\theta_{2}}(2\pi)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal">π</span><span class="mclose">)</span></span></span></span><!-- HTML_TAG_END --></span>. As usual, the loss function would be the squared reconstruction error, so for a minibatch <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">x_1,...,x_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span>:</p> <div class="math math-display"><!-- HTML_TAG_START --><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><msub><mi>θ</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>θ</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>k</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>k</mi></munderover><msup><mrow><mo fence="true">(</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo>−</mo><msub><mi mathvariant="normal">Φ</mi><msub><mi>θ</mi><mn>2</mn></msub></msub><mo stretchy="false">(</mo><msub><mi mathvariant="normal">Ψ</mi><msub><mi>θ</mi><mn>1</mn></msub></msub><mo stretchy="false">(</mo><msub><mi>ϕ</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo fence="true">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">L(X;{\theta_{1}},{\theta_{2}}) = \frac{1}{k} \sum_{i=1}^k \left( \phi_i - \Phi_{\theta_{2}}(\Psi_{\theta_{1}}(\phi_i)) \right)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal">X</span><span class="mpunct">;</span><span class="mspace"></span><span class="mord"><span class="mord"><span class="mord mathnormal">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"></span><span class="mord"><span class="mord"><span class="mord mathnormal">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="mord"><span class="mord mathnormal">k</span></span></span><span class="pstrut"><span class="frac-line"></span></span><span class="pstrut"><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span class="pstrut"><span class="mop op-symbol large-op">∑</span></span><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span><span class="mspace"></span><span class="minner"><span class="minner"><span class="mopen delimcenter">(</span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mspace"></span><span class="mbin">−</span><span class="mspace"></span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord">Ψ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">ϕ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mclose">))</span><span class="mclose delimcenter">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></div> <p>Since the loss is minimized by gradient descent methods, nothing ensures that <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">Φ</mi><msub><mi>θ</mi><mn>2</mn></msub></msub><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo><mo>=</mo><msub><mi mathvariant="normal">Φ</mi><msub><mi>θ</mi><mn>2</mn></msub></msub><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Phi_{\theta_{2}}(0) = \Phi_{\theta_{2}}(2\pi)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal">π</span><span class="mclose">)</span></span></span></span><!-- HTML_TAG_END --></span>; this is not easy to enforce directly, so at training we must ‘steer’ the fitted path to fulfill the constraint. This is done by adding an extra term in the loss function at each iteration:</p> <div class="math math-display"><!-- HTML_TAG_START --><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><msub><mi>θ</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>θ</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>←</mo><mi>L</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">;</mo><msub><mi>θ</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>θ</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mfrac><mn>1</mn><mi>k</mi></mfrac><mo stretchy="false">(</mo><msub><mi mathvariant="normal">Φ</mi><msub><mi>θ</mi><mn>2</mn></msub></msub><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo><mo>−</mo><msub><mi mathvariant="normal">Φ</mi><msub><mi>θ</mi><mn>2</mn></msub></msub><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mo stretchy="false">)</mo><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">L(X;{\theta_{1}},{\theta_{2}}) \leftarrow L(X;{\theta_{1}},{\theta_{2}}) + \frac{1}{k} (\Phi_{\theta_{2}}(0) - \Phi_{\theta_2}(2\pi))^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal">X</span><span class="mpunct">;</span><span class="mspace"></span><span class="mord"><span class="mord"><span class="mord mathnormal">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"></span><span class="mord"><span class="mord"><span class="mord mathnormal">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"></span><span class="mrel">←</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord mathnormal">L</span><span class="mopen">(</span><span class="mord mathnormal">X</span><span class="mpunct">;</span><span class="mspace"></span><span class="mord"><span class="mord"><span class="mord mathnormal">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace"></span><span class="mord"><span class="mord"><span class="mord mathnormal">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"></span><span class="mbin">+</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="mord"><span class="mord mathnormal">k</span></span></span><span class="pstrut"><span class="frac-line"></span></span><span class="pstrut"><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace"></span><span class="mbin">−</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal">π</span><span class="mclose">)</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></div> <p>this term could cause instability because both terms <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi mathvariant="normal">Φ</mi><msub><mi>θ</mi><mn>1</mn></msub></msub><mo stretchy="false">(</mo><mn>0</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi mathvariant="normal">Φ</mi><msub><mi>θ</mi><mn>1</mn></msub></msub><mo stretchy="false">(</mo><mn>2</mn><mi>π</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Phi_{\theta_{1}}(0), \Phi_{\theta_{1}}(2\pi)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord"><span class="mord">Φ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">θ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist"></span></span></span></span></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal">π</span><span class="mclose">)</span></span></span></span><!-- HTML_TAG_END --></span> are ‘chasing each other’, but we can use the same trick as in Q-learning networks and take only the gradient with respect to one of both terms at each SGD step. In practice this is enough to ensure closedness, to an acceptable degree.</p> <h2 id="architecture" data-svelte-h="svelte-m3c4bv"><a href="#architecture">Architecture</a></h2> <p data-svelte-h="svelte-l3gdyp">Overall, the model architecture is almost identical to that of a regular autoencoder, except for three points:</p> <ol data-svelte-h="svelte-lclv6m"><li><p>The input must be the angular representation of the data described in the previous section</p></li> <li><p>The encoding is one-dimensional and its activation function is a rescaled sigmoid</p></li> <li><p>The output units also have rescaled sigmoid activation to enforce the angles’ domain restrictions</p></li></ol> <p data-svelte-h="svelte-18m48hw">To make this architecture useful for arbitrarily large input sizes one has to be careful when handling the conversion to and from Cartesian and polar coordinates, since the latter involve long products of trigonometric functions that might potentially cause numeric underflows, but this can be done accurately by using logarithms and keeping track of the signs separately.</p> <h2 id="implementation-details" data-svelte-h="svelte-zjrjqk"><a href="#implementation-details">Implementation details</a></h2> <p data-svelte-h="svelte-18rn38o">I implemented this model with batch normalization layers; since we are trying to compress and then reconstruct data angles, it makes sense that preserving the ‘centeredness’ of the data all the way through is beneficial to the model, although sometimes this compresses almost all of the data to a single quadrant of the plane, which can be a bit annoying, but overall the model performs better in the sense that projected clusters are clearer.</p> <p>I also use a <a href="https://en.wikipedia.org/wiki/Huber_loss" rel="nofollow noopener noreferrer external" target="_blank" data-svelte-h="svelte-1du7t8c">Huber loss</a> instead of a quadratic loss, which I found prevents some awkward behavior when enforcing the closedness restrictions and generally makes the projections better (in the examples I tried anyway). Finally, in the examples below I used an Adam optimizer with <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>=</mo><mn>0.001</mn></mrow><annotation encoding="application/x-tex">\alpha=0.001</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord mathnormal">α</span><span class="mspace"></span><span class="mrel">=</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mord">0.001</span></span></span></span><!-- HTML_TAG_END --></span>.</p> <h2 id="a-toy-example" data-svelte-h="svelte-53dgh5"><a href="#a-toy-example">A toy example</a></h2> <p>We can look at an example in <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span> to grasp how all of this works. Let’s look at how the model fits to synthetic data from a Gaussian mixture model with 5 components. In particular, what the associated path looks like:</p> <p><img src="/angular-autoencoder/images/angular_autoencoder_gmm.gif" alt="aag" class="rounded-lg my-2" loading="lazy" decoding="async"></p> <p>What we see is the Gaussian mixtures data projected (in pink) on the unit sphere in <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span>, which end up creating some spotted pattern on it. We can also see the fitted closed path in orange, going through each cluster. The way we map this to <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span> is, for any pink observation, the encoder will give us a <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>2</mn><mi>π</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">t \in [0,2\pi]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord mathnormal">t</span><span class="mspace"></span><span class="mrel">∈</span><span class="mspace"></span></span><span class="base"><span class="strut"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace"></span><span class="mord">2</span><span class="mord mathnormal">π</span><span class="mclose">]</span></span></span></span><!-- HTML_TAG_END --></span> for which the orange path is closest to the observation; this <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord mathnormal">t</span></span></span></span><!-- HTML_TAG_END --></span> is taken as the angular coordinate of the observation in <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span>, while its original norm is used as its projection’s norm. Once we do this, we get the figure below.</p> <p><picture><source srcset="/_app/immutable/assets/angular_autoencoder_gmm.16b9f83f.avif 736w" type="image/avif"> <img src="/angular-autoencoder/images/angular_autoencoder_gmm.png" alt="aag_" class="rounded-lg my-2" loading="lazy" decoding="async"></picture></p> <p data-svelte-h="svelte-efmlni">The model had a single 50-neuron hidden layer in both the encoder and decoder; the results suggest that if there are clusters in the data, whatever shape they might have, it should be relatively easy for an angular autoencoder to keep them separated in the projection.</p> <h2 id="reuters-data" data-svelte-h="svelte-1nflms8"><a href="#reuters-data">Reuters data</a></h2> <p data-svelte-h="svelte-sh39yb">The first dataset I tried this on is the <a href="https://www.kaggle.com/nltkdata/reuters" rel="nofollow noopener noreferrer external" target="_blank">Reuters dataset</a>, which has close to 20,000 news articles from the 1980s; I took the 3,000 longest articles, since a lot of them were very short and had mostly quantitative information; to process the data I used SKlearn’s <a href="https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.CountVectorizer.html" rel="nofollow noopener noreferrer external" target="_blank">CountVectorizer</a>, dropping words with less than 5% or more than 90% frequency, and then used NLTK’s <a href="https://www.nltk.org/api/nltk.stem.html" rel="nofollow noopener noreferrer external" target="_blank">Porter stemming algorithm</a>, which resulted in a vocabulary of 365 words. Looking at the texts, it appears that most if not all articles I kept were about Finance and Economics, so the vocabulary is relatively small.</p> <h3 id="reuters-data-ordinary-autoencoder" data-svelte-h="svelte-rmd5hz"><a href="#reuters-data-ordinary-autoencoder">Reuters data: ordinary autoencoder</a></h3> <p data-svelte-h="svelte-17d29gr">To have a baseline model, I fitted a regular autoencoder to the data; the architecture that I used for this consisted in 3-layered encoders and decoders, each layer with 500 neurons; batch normalization layers were used too in the baseline autoencoder models to make comparisons fair. The model was fitted for 300 epochs using an Adam optimizer. Below we see the results of this model: the projections to the left, and the loss trace to the right.</p> <p><picture><source srcset="/_app/immutable/assets/autoencoder_reuters_results.787fd5cc.avif 736w" type="image/avif"> <img src="/angular-autoencoder/images/autoencoder_reuters_results.png" alt="euclidean_reuters_results" class="rounded-lg my-2" loading="lazy" decoding="async"></picture></p> <h3 id="reuters-data-angular-autoencoder" data-svelte-h="svelte-zok7qb"><a href="#reuters-data-angular-autoencoder">Reuters data: Angular autoencoder</a></h3> <p data-svelte-h="svelte-5flh6b">The architecture of this model was exactly the same than for the regular autoencoder used above, besides the fact that we now have one encoding neuron instead of 2; in the figure below, we see the projected data to the right, and the loss trace to the left.</p> <p><img src="./images/angular_autoencoder_reuters_results.png" alt="angular_reuters_results" class="rounded-lg my-2" loading="lazy" decoding="async"></p> <p data-svelte-h="svelte-arkren">I ran a few quick tests to see what the clusters meant, and they made sense: they seem to be related to international trade, legal disputes, international economy and so on, but I did not go much deeper. The supplementary document labels from NLTK are meant for prediction tasks and are too fine-grained for this partitioning, so they aren’t very helpful when exploring the clusters. Still, I think it’s remarkable that under the same conditions than a regular autoencoder in the figure above, this model managed to get so many cleanly split clusters in the data.</p> <h2 id="legal-texts-data" data-svelte-h="svelte-1iljyvj"><a href="#legal-texts-data">Legal texts data</a></h2> <p data-svelte-h="svelte-758uda">Another dataset I wanted to try this on is a corpus of transcripts from cases heard by the U.S. Supreme Court between the years 2000 and 2013; the reason is that I used this data in my Bachellor’s dissertation, and at the time I ended up using methods such as <a href="https://en.wikipedia.org/wiki/Latent_Dirichlet_allocation" rel="nofollow noopener noreferrer external" target="_blank">LDA</a> to find their topics, but a lot of them required to specify the number of topics to look for, so I thought it would be interesting to try this model instead and see what I get. The data consist of 930 documents, each one with between 5,000 and 15,000 words. The preprocessing was exactly the same than for the Reuters data above, which resulted in a vocabulary of 2,440 words.</p> <h3 id="legal-texts-data-ordinary-autoencoder" data-svelte-h="svelte-fzqpf2"><a href="#legal-texts-data-ordinary-autoencoder">Legal texts data: ordinary autoencoder</a></h3> <p data-svelte-h="svelte-5mciqb">The baseline autoencoder had a 3-layered encoder and decoder with sizes (1600,400,100), which were reversed in the case of the decoder. The model was fitted for 500 epochs and the results are below:</p> <p><picture><source srcset="/_app/immutable/assets/autoencoder_legal_data_results.f00857ff.avif 736w" type="image/avif"> <img src="/angular-autoencoder/images/autoencoder_legal_data_results.png" alt="angular_legal_data" class="rounded-lg my-2" loading="lazy" decoding="async"></picture></p> <p data-svelte-h="svelte-19xc6xy">It seems that the model hasn’t fully converged after 500 epochs, but to do a fair comparison I still stopped it there.</p> <h3 id="legal-texts-data-angular-autoencoder" data-svelte-h="svelte-gbvvcy"><a href="#legal-texts-data-angular-autoencoder">Legal texts data: angular autoencoder</a></h3> <p data-svelte-h="svelte-1s0xidy">Again, the angular model’s architecture was identical to the regular autoencoder used above. The results are below:</p> <p><picture><source srcset="/_app/immutable/assets/angular_legal_data_results.fd120fd6.avif 736w" type="image/avif"> <img src="/angular-autoencoder/images/angular_legal_data_results.png" alt="angular_legal_data" class="rounded-lg my-2" loading="lazy" decoding="async"></picture></p> <p data-svelte-h="svelte-1y9kil1">For this particular model I dropped the closedness constraint, since for this data it looked like enforcing it degraded the number of clusters found by the model. In principle, dropping the constraint should be fine, as long as we keep in mind that projections in the vicinity of zero-radian angles could come from 2 very different places in the original space, one at each end of the (open) fitted path, but that is not a problem in this case. According to this model, there are 7 different kinds of documents, which I find insteresting, since in my Bachellor’s dissertation I only found with 5 groups!</p> <h2 id="hand-posture-data" data-svelte-h="svelte-ocn7cv"><a href="#hand-posture-data">Hand posture data</a></h2> <p data-svelte-h="svelte-101vyn5">As a final test I grabbed a <a href="http://archive.ics.uci.edu/ml/datasets/MoCap+Hand+Postures" rel="nofollow noopener noreferrer external" target="_blank">hand postures dataset from the UCI repository</a>. The data has 38 dimensions, and is the result from motion cameras recording markers in a left-hand glove, when 12 users were asked to perform 5 specific positions with it. There are some missing data due to occlusion, so I dropped observations that had missing values in any of of the first 11 markers, which left me with some 15,000 observations;</p> <h3 id="hand-posture-data-ordinary-autoencoder" data-svelte-h="svelte-lanwjo"><a href="#hand-posture-data-ordinary-autoencoder">Hand posture data: ordinary autoencoder</a></h3> <p data-svelte-h="svelte-sunos">In this case the layers in the encoder and decoder were of size (50,30,10). The results are below:</p> <p><picture><source srcset="/_app/immutable/assets/autoencoder_hand_posture_results.e258fff6.avif 736w" type="image/avif"> <img src="/angular-autoencoder/images/autoencoder_hand_posture_results.png" alt="hand_posture_results" class="rounded-lg my-2" loading="lazy" decoding="async"></picture></p> <p data-svelte-h="svelte-xkj8mw">The data in the above figure was sampled down to 3,000 points, and the figure is zoomed to where most points are.</p> <h3 id="hand-posture-data-angular-autoencoder" data-svelte-h="svelte-srexb8"><a href="#hand-posture-data-angular-autoencoder">Hand posture data: angular autoencoder</a></h3> <p data-svelte-h="svelte-3zx0">This model had the same architeture as the model above too:</p> <p><picture><source srcset="/_app/immutable/assets/angular_autoencoder_hand_posture_results.882ac25b.avif 736w" type="image/avif"> <img src="/angular-autoencoder/images/angular_autoencoder_hand_posture_results.png" alt="hand_posture_results_autoencoder" class="rounded-lg my-2" loading="lazy" decoding="async"></picture></p> <p data-svelte-h="svelte-m229re">The data was again sampled down to 3,000 points to be able to see their general topology, and the figure was also zoomed in to where most point were, since there were some strong outliers. There are some stripes of data that are relatively well separated from the rest. Since this model associates different angles to different clusters, each one of this ‘rays’ should correspond to a separate cluster in the data.</p> <h2 id="generalization" data-svelte-h="svelte-1584l1o"><a href="#generalization">Generalization</a></h2> <p>A one-dimensional encoding allow us to map data to <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span>, but the model can also find multidimensional encoded representations; if we place multiple neurons at the bottleneck layer, and make their activation functions enforce the angular space restrictions (just as we did with the model’s output layer), then the model would be effectively taking a hypersphere and projecting it on a low-dimensional hypersphere; in the one-dimensional case we get an irregular closed path, as we saw, but it is hard for me to think about what the multi-dimensional equivalent would look like; these models wouldn’t be too useful for data visualization anymore, but it could be an interesting idea to combine with variational autoencoders, for example.</p> <h2 id="summary" data-svelte-h="svelte-1ktah9w"><a href="#summary">Summary</a></h2> <p>An angular autoencoder fits a closed path on a multidimensional hypersphere to the projection that data induce in such hypersphere. This property can make it easier to capture some data topologies, such as clusters, compared to traditional autoencoders and other models. This property also makes it straightforward to project the data to <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span>, as we can ‘unfold’ such path taking is as the angular space in <span class="math math-inline"><!-- HTML_TAG_START --><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\mathbb{R}^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist"><span class="pstrut"><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><!-- HTML_TAG_END --></span>.</p> <h2 id="source-code" data-svelte-h="svelte-gu93jo"><a href="#source-code">Source code</a></h2> <p data-svelte-h="svelte-1d1q3qy">You can get the model’s Pytorch code <a href="https://bitbucket.org/nestorSag/dl_projects/src/master/autoencoders/py/src/models.py" rel="nofollow noopener noreferrer external" target="_blank">here</a>. You can also replicate these results by cloning the <a href="https://bitbucket.org/nestorSag/dl_projects/src/master/" rel="nofollow noopener noreferrer external" target="_blank">repo</a> and running:</p> <!-- HTML_TAG_START --><pre class="shiki material-default" sh="true"><div class="language-id">sh</div><div class='code-container'><code><div class='line'>./autoencoders/py/experiments/run_blogpost_experiments.sh # install dependencies with pipenv first!</div></code></div></pre><!-- HTML_TAG_END -->]]>
    </content>
    <category term="dimensionality reduction" scheme="https://urara-demo.netlify.app/?tags=dimensionality%20reduction" />
    <category term="auto encoder" scheme="https://urara-demo.netlify.app/?tags=auto%20encoder" />
  </entry>
  <entry>
    <title type="html"><![CDATA[About]]></title>
    <link href="https://urara-demo.netlify.app/about" />
    <id>https://urara-demo.netlify.app/about</id>
    <published>2019-01-01T00:00:00.000Z</published>
    <updated>2024-01-21T19:56:11.531Z</updated>
    <content type="html">
      <![CDATA[<img src="/about/images/profile.jpeg" alt="drawing">  <p data-svelte-h="svelte-1n9txem">I’m Nestor Sanchez, a Data Scientist and Software Engineer based in Edinburgh, UK.</p> <p data-svelte-h="svelte-1hsp4fw">I started working on this field in 2015, and since then I have helped companies in Manufacturing, Education, Telecom, Energy and Marketing to turn their data into insights and products.</p> <p data-svelte-h="svelte-1x4ewnd">My academic background includes a PhD in Statistics and an MSc in High Performance Computing, both by the University of Edinburgh.</p> <p data-svelte-h="svelte-1vrgvfs">My main areas of interests are applications of Machine Learning in renewable energy and applications of NLP in the legal domain.</p> <div data-svelte-h="svelte-ip3u6y"><a href="https://www.linkedin.com/in/nestor-sanchez-0a7a4793/" rel="LinkedIn URL" target="_blank"> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" height="50px"><path fill="#1a5fb4" d="M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z"></path></svg></a> <a href="https://github.com/nestorSag" rel="LinkedIn URL" target="_blank"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512" height="50px"><path fill="#1a5fb4" d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3 .3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5 .3-6.2 2.3zm44.2-1.7c-2.9 .7-4.9 2.6-4.6 4.9 .3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3 .7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3 .3 2.9 2.3 3.9 1.6 1 3.6 .7 4.3-.7 .7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3 .7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3 .7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"></path></svg></a></div>]]>
    </content>
  </entry>
</feed>